// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;

#nullable disable

namespace TourimAdventures.Entity.Entity
{
    public partial class TourismAdventuresContext : DbContext
    {
        public TourismAdventuresContext()
        {
        }

        public TourismAdventuresContext(DbContextOptions<TourismAdventuresContext> options)
            : base(options)
        {

        }

        public virtual DbSet<Activity> Activities { get; set; }
        public virtual DbSet<ActivityTransaction> ActivityTransactions { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Hotel> Hotels { get; set; }
        public virtual DbSet<HotelBooking> HotelBookings { get; set; }
        public virtual DbSet<HotelReservationType> HotelReservationTypes { get; set; }
        public virtual DbSet<Place> Places { get; set; }
        public virtual DbSet<Program> Programs { get; set; }
        public virtual DbSet<RoomReservationType> RoomReservationTypes { get; set; }
        public virtual DbSet<Trip> Trips { get; set; }
        public virtual DbSet<TripProgramActivity> TripProgramActivities { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {

            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Arabic_CI_AS");

            modelBuilder.Entity<Activity>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Place)
                    .WithMany(p => p.Activities)
                    .HasForeignKey(d => d.PlaceId)
                    .HasConstraintName("FK_Activity_Place");
            });

            modelBuilder.Entity<ActivityTransaction>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.TripProgramActivityId, e.CustomerId });

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.ActivityTransactions)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_ActivityTransaction_Customer");

                entity.HasOne(d => d.TripProgramActivity)
                    .WithMany(p => p.ActivityTransactions)
                    .HasForeignKey(d => d.TripProgramActivityId)
                    .HasConstraintName("FK_ActivityTransaction_TripProgramActivity");
            });

            modelBuilder.Entity<City>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.PassportId).IsUnicode(false);

                entity.Property(e => e.Phone).IsUnicode(false);
            });

            modelBuilder.Entity<Hotel>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.City)
                    .WithMany(p => p.Hotels)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Hotel_City");
            });

            modelBuilder.Entity<HotelBooking>(entity =>
            {
                entity.HasKey(e => new { e.CutomerId, e.ProgramId, e.HotelId })
                    .HasName("PK_HotelBooking_1");

                entity.HasOne(d => d.Cutomer)
                    .WithMany(p => p.HotelBookings)
                    .HasForeignKey(d => d.CutomerId)
                    .HasConstraintName("FK_HotelBooking_Customer");

                entity.HasOne(d => d.Hotel)
                    .WithMany(p => p.HotelBookings)
                    .HasForeignKey(d => d.HotelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HotelBooking_Hotel");

                entity.HasOne(d => d.HotelReservationType)
                    .WithMany(p => p.HotelBookings)
                    .HasForeignKey(d => d.HotelReservationTypeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_HotelBooking_HotelReservationType");

                entity.HasOne(d => d.Program)
                    .WithMany(p => p.HotelBookings)
                    .HasForeignKey(d => d.ProgramId)
                    .HasConstraintName("FK_HotelBooking_Program");

                entity.HasOne(d => d.RoomReservationType)
                    .WithMany(p => p.HotelBookings)
                    .HasForeignKey(d => d.RoomReservationTypeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_HotelBooking_RoomReservationType");
            });

            modelBuilder.Entity<HotelReservationType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<Place>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<Program>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.City)
                    .WithMany(p => p.Programs)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Program_City");
            });

            modelBuilder.Entity<RoomReservationType>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<Trip>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.Trips)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Trip_Country");
            });

            modelBuilder.Entity<TripProgramActivity>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Activity)
                    .WithMany(p => p.TripProgramActivities)
                    .HasForeignKey(d => d.ActivityId)
                    .HasConstraintName("FK_TripProgramActivity_Activity");

                entity.HasOne(d => d.Program)
                    .WithMany(p => p.TripProgramActivities)
                    .HasForeignKey(d => d.ProgramId)
                    .HasConstraintName("FK_TripProgramActivity_Program");

                entity.HasOne(d => d.Trip)
                    .WithMany(p => p.TripProgramActivities)
                    .HasForeignKey(d => d.TripId)
                    .HasConstraintName("FK_TripProgramActivity_Trip");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}